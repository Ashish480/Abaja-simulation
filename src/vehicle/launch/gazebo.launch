from launch import LaunchDescription
from launch.actions import IncludeLaunchDescription
from launch_ros.actions import Node
from launch.launch_description_sources import PythonLaunchDescriptionSource
from launch.substitutions import FindPackageShare
from launch.substitutions import Command

def generate_launch_description():
    return LaunchDescription([
        # Include Gazebo empty world launch file
        IncludeLaunchDescription(
            PythonLaunchDescriptionSource(
                [FindPackageShare('gazebo_ros'), '/launch/gazebo.launch.py']
            ),
        ),

        # Static Transform Publisher Node
        Node(
            package='tf2_ros',
            executable='static_transform_publisher',
            name='tf_footprint_base',
            arguments=['0', '0', '0', '0', '0', '0', 'base_link', 'base_footprint', '40']
        ),

        # Spawn Model Node
        Node(
            package='gazebo_ros',
            executable='spawn_entity.py',
            name='spawn_model',
            arguments=[
                '-file', str(FindPackageShare('B4WTYPE3')) + '/urdf/B4WTYPE3.urdf',
                '-entity', 'B4WTYPE3'
            ],
            output='screen'
        ),

        # Publish to /calibrated topic (std_msgs/Bool) with a true value
        Node(
            package='std_msgs',
            executable='pub',
            name='fake_joint_calibration',
            arguments=['/calibrated', 'std_msgs/Bool', 'true']
        ),
    ])

